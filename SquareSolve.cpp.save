#include <stdio.h>
#include <math.h>
#include <assert.h>

struct coefficients
{
    double a, b, c;
};

enum RootsAmount
{

    ROOTS_AMOUNT_ERR_CODE = -2,
    ROOTS_AMOUNT_INF_ROOTS,
    ROOTS_AMOUNT_NO_ROOTS,
    ROOTS_AMOUNT_ONE_ROOT,
    ROOTS_AMOUNT_TWO_ROOTS
};

// main.cpp
// io.cpp
// floating.cpp fp_helpers.cpp floating point
// solve.cpp

const double MIN_DIFF = 1e-3;

bool IsZero(double a);
bool Compare(double a, double b);
void TestSolveSquare();
int PrintEquation(struct coefficients* my_coeff);
int SolveSquare(struct coefficients my_coeff, double* x1, double* x2);
int PrintResult(int n, double x1, double x2);
int UserInput(struct coefficients *my_coeff);

int main()
{
    while (true)
    {
        struct coefficients user_coeff = {0, 0, 0};
        double x1 = 0, x2 = 0;

        UserInput(&user_coeff);

        int n_roots = SolveSquare(user_coeff, &x1, &x2);
        PrintResult(n_roots, x1, x2);

        TestSolveSquare();
    }

    return 0;
}

// True for small a & b
bool Compare(double a, double b)
{
    return (fabs(a - b) <= MIN_DIFF) ? true : false;
}

int UserInput(struct coefficients* my_coeff)
{
    assert(my_coeff);

    printf("Program for solving an equation of the type ax^2 + bx + c = 0\n");
    printf("Enter the coefficients: a, b, c\n");

    printf("a = ");
    scanf("%lg", &my_coeff->a);   // sscanf

    printf("b = ");
    scanf("%lg", &my_coeff->b);

    printf("c = ");
    scanf("%lg", &my_coeff->c);

    PrintEquation(my_coeff);

    return 0;
}

bool IsZero(double a)
{
    return (fabs(a) <= MIN_DIFF) ? true : false;
}

int SolveSquare(struct coefficients my_coeff, double *x1, double *x2)
{
    assert(x1);
    assert(x2);

    if (IsZero(my_coeff.a))
    {
        if (IsZero(my_coeff.b))
        {
            return (IsZero(my_coeff.c)) ? ROOTS_AMOUNT_INF_ROOTS : ROOTS_AMOUNT_NO_ROOTS;
        }
        else
        {
            *x1 = (IsZero(my_coeff.c)) ? 0 : (-my_coeff.c / my_coeff.b);

            return ROOTS_AMOUNT_ONE_ROOT;
        }
    }

    double d = (my_coeff.b*my_coeff.b) - (4*my_coeff.a*my_coeff.c);

    if (d < 0)
    {
        return ROOTS_AMOUNT_NO_ROOTS;
    }
    else if (IsZero(d))
    {
        *x1 = *x2 = (IsZero(-my_coeff.b / (2*my_coeff.a))) ? 0 : (-my_coeff.b / (2*my_coeff.a));

        return ROOTS_AMOUNT_ONE_ROOT;
    }
    else if (d > 0)
    {
        *x1 = (IsZero((-my_coeff.b + sqrt(d)) / (2*my_coeff.a))) ? 0 : ((-my_coeff.b + sqrt(d)) / (2*my_coeff.a));
        *x2 = (IsZero((-my_coeff.b - sqrt(d)) / (2*my_coeff.a))) ? 0 : ((-my_coeff.b - sqrt(d)) / (2*my_coeff.a));

        return ROOTS_AMOUNT_TWO_ROOTS;
    }

    return ROOTS_AMOUNT_ERR_CODE;
}

int PrintEquation(struct coefficients* my_coeff)
{
    int first_print = 0;

    if (!IsZero(my_coeff->a))
    {
        if (Compare(my_coeff->a, 1))
            printf("X^2");
        else if (Compare(my_coeff->a, -1))
            printf("-X^2");
        else
            printf("%lgX^2", my_coeff->a);
        first_print = 1;
    }

    if (!IsZero(my_coeff->b))
    {
        if (first_print == 0)
        {
            first_print = 1;
            if (Compare(my_coeff->b, 1))
                printf("X");
            else if (Compare(my_coeff->b, 1))
                printf("-X");
            else
            {
                if (my_coeff->b > 0)
                    printf("%lgX", my_coeff->b);
                else
                    printf("-%lgX", fabs(my_coeff->b));
            }
        }
        else
        {
            if (Compare(my_coeff->b, 1))
                printf(" + X");
            else if (Compare(my_coeff->b, -1))
                printf(" - X");
            else
            {
                if (my_coeff->b > 0)
                    printf(" + %lgX", my_coeff->b);
                else
                    printf(" - %lgX", fabs(my_coeff->b));
            }
        }
    }

    if (!IsZero(my_coeff->c))
    {
        if (first_print == 0)
        {
            first_print = 1;
            printf("%lg", my_coeff->c);
        }
        else
        {
            if (my_coeff->c > 0)
                printf(" + %lg", my_coeff->c);
            else
                printf(" - %lg", fabs(my_coeff->c));
        }
    }
    if  (IsZero(my_coeff->c) && first_print == 0)
        printf("0");

    printf(" = 0\n");

    return 0;
}

int PrintResult(int n, double x1, double x2)
{
    switch (n)
    {
        case ROOTS_AMOUNT_NO_ROOTS:
            printf("No roots\n");
            break;
        case ROOTS_AMOUNT_ONE_ROOT:
            printf("Single root x = %lg\n", x1);
            break;
        case ROOTS_AMOUNT_TWO_ROOTS:
            printf("Roots: x1 = %lg, x2 = %lg\n", x1, x2);
            break;
        case ROOTS_AMOUNT_INF_ROOTS:
            printf("Any number is a root\n");
            break;
        case ROOTS_AMOUNT_ERR_CODE:
            printf("Error (Finding roots)\n");
            break;
        default:
            printf("Error\n");
            break;
    }

    return 0;
}

void TestSolveSquare()
{

    for (int a_i = -100; a_i <= 100; a_i += 1)
    {
        for (int b_i = -100; b_i <= 100; b_i += 1)
        {
            for (int c_i = -100; c_i <= 100; c_i += 1)
            {
                double x1 = 0, x2 = 0;

                double a = a_i * 0.1;
                double b = b_i * 0.1;
                double c = c_i * 0.1;

                struct coefficients test_coefficients;

                test_coefficients.a = a;
                test_coefficients.b = b;
                test_coefficients.c = c;

                int nRoots = SolveSquare(test_coefficients, &x1, &x2);

                switch (nRoots)
                {
                    case ROOTS_AMOUNT_ONE_ROOT:
                        if (!IsZero(a*x1*x1 + b*x1 + c))
                            printf("FAILED a = %lg b = %lg c = %lg x1 = %lg\n", a, b, c, x1);
                        break;
                    case ROOTS_AMOUNT_TWO_ROOTS:
                        if (!IsZero(a*x1*x1 + b*x1 + c) && !IsZero(a*x2*x2 + b*x2 + c))
                            printf("FAILED a = %lg b = %lg c = %lg x1 = %lg x2 = %lg\n", a, b, c, x1, x2);
                        break;
                    default:;
                }
            }
        }
    }
}
