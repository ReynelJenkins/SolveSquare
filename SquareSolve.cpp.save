#include <stdio.h>
#include <math.h>
#include <assert.h>

struct coefficients
{
    double a, b, c;

};

enum RootsAmount
{
    ERR_CODE = -2,
    INF_ROOTS,
    NO_ROOTS,
    ONE_ROOT,
    TWO_ROOTS
};

const double MIN_DIFF = 1e-3;

bool IsZero(double a);
bool Compare(double a, double b);
void TestSolveSquare();
int PrintEquation(struct coefficients mycoeff);
int SolveSquare(struct coefficients mycoeff, double* x1, double* x2);
int PrintResult(int n, double x1, double x2);
int UserInput(struct coefficients *mycoeff);

int main()
{
    while (1)
    {
        struct coefficients UserCoeff = {0, 0, 0};
        double x1 = 0, x2 = 0;
        UserInput(&UserCoeff);
        int nRoots = SolveSquare(UserCoeff, &x1, &x2);
        PrintResult(nRoots, x1, x2);
        //TestSolveSquare();
    }
    return 0;
}

// Верно для небольших a и b
bool Compare(double a, double b)
{
    return (fabs(a - b) <= MIN_DIFF) ? true : false;
}

int UserInput(struct coefficients *mycoeff)
{
    //assert

    printf("Programm for solving an equation of the type ax^2 + bx + c = 0\n");
    printf("Enter the coefficients: a, b, c\n");
    double a = 0, b = 0, c = 0;
    printf("a = ");
    scanf("%lg", &a);
    printf("b = ");
    scanf("%lg", &b);
    printf("c = ");
    scanf("%lg", &c);

    mycoeff->a = a;
    mycoeff->b = b;
    mycoeff->c = c;
    PrintEquation(*mycoeff);

    return 0;
}

bool IsZero(double a)
{
    return (a <= MIN_DIFF && a >= -MIN_DIFF) ? true : false;
}

int SolveSquare(struct coefficients mycoeff, double *x1, double *x2)
{
    assert(x1);
    assert(x2);

    if (IsZero(mycoeff.a))
    {
        if (IsZero(mycoeff.b))
        {
            return (IsZero(mycoeff.c)) ? INF_ROOTS : NO_ROOTS;
        }
        else
        {
            *x1 = (IsZero(mycoeff.c)) ? 0 : (-mycoeff.c / mycoeff.b);

            return ONE_ROOT;
        }
    }

    double d = (mycoeff.b*mycoeff.b) - (4*mycoeff.a*mycoeff.c);

    if (d < 0)
    {
        return NO_ROOTS;
    }
    else if (IsZero(d))
    {
        *x1 = *x2 = (IsZero(-mycoeff.b / (2*mycoeff.a))) ? 0 : (-mycoeff.b / (2*mycoeff.a));

        return ONE_ROOT;
    }
    else if (d > 0)
    {
        *x1 = (IsZero((-mycoeff.b + sqrt(d)) / (2*mycoeff.a))) ? 0 : ((-mycoeff.b + sqrt(d)) / (2*mycoeff.a));
        *x2 = (IsZero((-mycoeff.b - sqrt(d)) / (2*mycoeff.a))) ? 0 : ((-mycoeff.b - sqrt(d)) / (2*mycoeff.a));

        return TWO_ROOTS;
    }

    return ERR_CODE;
}

int PrintEquation(struct coefficients mycoeff)
{
    int FirstPrint = 0;

    if (!IsZero(mycoeff.a))
    {
        if (Compare(mycoeff.a, 1))
            printf("X^2");
        else if (Compare(mycoeff.a, -1))
            printf("-X^2");
        else
            printf("%lgX^2", mycoeff.a);
        FirstPrint = 1;
    }

    if (!IsZero(mycoeff.b))
    {
        if (FirstPrint == 0)
        {
            FirstPrint = 1;
            if (Compare(mycoeff.b, 1))
                printf("X");
            else if (Compare(mycoeff.b, 1))
                printf("-X");
            else
            {
                if (mycoeff.b > 0)
                    printf("%lgX", mycoeff.b);
                else
                    printf("-%lgX", fabs(mycoeff.b));
            }
        }
        else
        {
            if (Compare(mycoeff.b, 1))
                printf(" + X");
            else if (Compare(mycoeff.b, -1))
                printf(" - X");
            else
            {
                if (mycoeff.b > 0)
                    printf(" + %lgX", mycoeff.b);
                else
                    printf(" - %lgX", fabs(mycoeff.b));
            }
        }
    }

    if (!IsZero(mycoeff.c))
    {
        if (FirstPrint == 0)
        {
            FirstPrint = 1;
            printf("%lg", mycoeff.c);
        }
        else
        {
            if (mycoeff.c > 0)
                printf(" + %lg", mycoeff.c);
            else
                printf(" - %lg", fabs(mycoeff.c));
        }
    }
    if  (IsZero(mycoeff.c) && FirstPrint == 0)
        printf("0");

    printf(" = 0\n");

    return 0;
}

int PrintResult(int n, double x1, double x2)
{
    switch (n)
    {
        case NO_ROOTS:
            printf("No roots\n");
            break;
        case ONE_ROOT:
            printf("Single root x = %lg\n", x1);
            break;
        case TWO_ROOTS:
            printf("Roots: x1 = %lg, x2 = %lg\n", x1, x2);
            break;
        case INF_ROOTS:
            printf("Any number is a root\n");
            break;
        case ERR_CODE:
            printf("Error (Finding roots)\n");
            break;
        default:
            printf("Error\n");
            break;
    }

    return 0;
}

void TestSolveSquare()
{

    for (double a = -3; a <= 3; a += 0.5)
    {
        for (double b = -3; b <= 3; b += 0.5)
        {
            for (double c = -3; c <= 3; b += 0.5)
            {
                double x1 = 0, x2 = 0;

                struct coefficients TestCoefficients;

                TestCoefficients.a = a;
                TestCoefficients.b = b;
                TestCoefficients.c = c;

                int nRoots = SolveSquare(TestCoefficients, &x1, &x2);

                switch (nRoots)
                {
                    case ONE_ROOT:
                        if (!IsZero(a*x1*x1 + b*x1 + c))
                            printf("FAILED a = %lg b = %lg c = %lg x1 = %lg", a, b, c, x1);
                        break;
                    case TWO_ROOTS:
                        if (!IsZero(a*x1*x1 + b*x1 + c) && !IsZero(a*(x2*x2) + b*x2 + c))
                            printf("FAILED a = %lg b = %lg c = %lg x1 = %lg x2 = %lg", a, b, c, x1, x2);
                        break;
                    default:
                        printf("Error\n");
                        break;
                }

            }
        }
    }
}
